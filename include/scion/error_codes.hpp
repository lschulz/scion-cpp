// Copyright (c) 2024-2025 Lars-Christian Schulz
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#pragma once

#include <expected>
#include <system_error>
#include <type_traits>


namespace scion {

/// \brief Error codes generated by scion-cpp.
enum class ErrorCode : int
{
    // success
    Ok = 0, ///< no error

    // alternate success
    Cancelled = 1, ///< operation cancelled
    Pending,       ///< operation not completed yet
    Timeout,       ///< operation timed out
    ScmpReceived,  ///< received an SCMP packet

    // errors
    LogicError = 128, ///< expected precondition failed
    NotImplemented,   ///< not implemented (yet)
    InvalidArgument,  ///< invalid argument
    SyntaxError,      ///< input contains syntax error(s)
    InvalidSocket,    ///< socket closed or invalid
    BufferTooSmall,   ///< provided buffer too small to hold output
    PacketTooBig,     ///< packet or payload too big
    RequiresZone,     ///< IPv6 address requires zone identifier
    NoLocalHostAddr,  ///< no suitable underlay host address found
    NameNotFound,     ///< name was not found
    RemoteError,      ///< remote machine returned an error
    FileNotFound,     ///< file not found

    // packet validation errors
    InvalidPacket = 256, ///< received an invalid packet
    ChecksumError,       ///< packet checksum incorrect
    DstAddrMismatch,     ///< packet rejected because of unexpected destination address
    SrcAddrMismatch,     ///< packet rejected because of unexpected source address
};

const std::error_category& scion_error_category();
std::error_code make_error_code(ErrorCode code);

/// \brief Error conditions that errors from scion-cpp and it's underlying
/// libraries (OS APIs, grpc, etc.) can be checked against.
enum class ErrorCondition : int
{
    // match codes equivalent to scion::ErrorCode
    Ok = 0, ///< no error
    Cancelled = 1, ///< operation cancelled
    Pending,       ///< operation not completed yet
    Timeout,       ///< operation timed out
    ScmpReceived,  ///< received an SCMP packet
    LogicError = 128, ///< expected precondition failed
    NotImplemented,   ///< not implemented (yet)
    InvalidArgument,  ///< invalid argument
    SyntaxError,      ///< input contains syntax error(s)
    InvalidSocket,    ///< socket closed or invalid
    BufferTooSmall,   ///< provided buffer too small to hold output
    PacketTooBig,     ///< packet or payload too big
    RequiresZone,     ///< IPv6 address requires zone identifier
    NoLocalHostAddr,  ///< no suitable underlay host address found
    NameNotFound,     ///< name was not found
    RemoteError,      ///< remote machine returned an error
    FileNotFound,     ///< file not found
    InvalidPacket = 256, ///< received an invalid packet
    ChecksumError,       ///< packet checksum incorrect
    DstAddrMismatch,     ///< packet rejected because of unexpected destination address
    SrcAddrMismatch,     ///< packet rejected because of unexpected source address

    // I/O error conditions from I/O subsystems
    WouldBlock = 1024, ///< nonblocking operation would block (EAGAIN, EWOULDBLOCK)

    // gRPC control plane communication errors
    ControlPlaneRPCError = 2048, ///< error in communication with control plane services
};

const std::error_category& scion_error_condition();
std::error_condition make_error_condition(ErrorCondition code);

template <typename T> using Maybe = std::expected<T, std::error_code>;
using Error = std::unexpected<std::error_code>;

template <typename T>
inline T& get(Maybe<T>& maybe)
{
    return maybe.value();
}

template <typename T>
inline T&& get(Maybe<T>&& maybe)
{
    return maybe.value();
}

template <typename T>
inline bool isError(const Maybe<T>& maybe)
{
    return !maybe.has_value();
}

template <typename T>
inline std::error_code getError(const Maybe<T>& maybe)
{
    return maybe.error();
}

template <typename T>
[[nodiscard]] inline
std::unexpected<std::error_code> propagateError(const Maybe<T>& maybe)
{
    return Error(maybe.error());
}

/// \brief Format an error code as "<category>:<value> <message>".
std::string fmtError(std::error_code ec);

} // namespace scion

namespace std {
template <> struct is_error_code_enum<scion::ErrorCode> : true_type {};
template <> struct is_error_condition_enum<scion::ErrorCondition> : true_type {};
}
